{
  "name": "Sortdescriptor",
  "tagline": "A NSSortDescriptor similar porting in Java language.",
  "body": "SortDescriptor\r\n================\r\n[![License](http://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\r\n[![CI Status](https://travis-ci.org/dbi1463/SortDescriptor.svg?branch=master)](https://travis-ci.org/dbi1463/SortDescriptor)\r\n[![Code coverage by codecov.io](https://codecov.io/github/dbi1463/SortDescriptor/coverage.svg?branch=master)](https://codecov.io/github/dbi1463/SortDescriptor?branch=master)\r\n[![Download](https://api.bintray.com/packages/dbi1463/maven/tw.funymph.sort-descriptor/images/download.svg)](https://bintray.com/dbi1463/maven/tw.funymph.sort-descriptor/_latestVersion)\r\n\r\nA NSSortDescriptor-like implementation on Java.\r\n\r\n## Features\r\n* Sort objects with multiple conditions\r\n* Sort objects with object's persistent properties without writing comparator\r\n* Sort objects with object's transient properties by writing transformers\r\n* Object's persistent properties and transient properties can be used together as the sort conditions\r\n\r\n## Donwload\r\n\r\nDownload [the latest JAR](https://github.com/dbi1463/SortDescriptor/releases/latest) or grab via Maven (will be available on JCenter soon):\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>tw.funymph</groupId>\r\n  <artifactId>sort-descriptor</artifactId>\r\n  <version>1.0.0</version>\r\n</dependency>\r\n```\r\nor Gradle (will be available on JCenter soon):\r\n\r\n```gradle\r\ncompile 'tw.funymph:sort-descriptor:1.0.0'\r\n```\r\n\r\n## How to use\r\nThe `SortDescriptors` can be use to organize the sort conditions. Given a person object that has first name, last name, full name, age, and gender properties (see the Person.java in test code). For example, if we would like to sort persons first by whether the person is adult or not, than by the gender, and last by his/her first name. There is no need to write complicated comparator. With `SortDescriptors`, the following code combines three sort descriptors together. The first sort descriptor wraps a transformer (`AdultChecker`) to sort transient property from a person object. The third statement adds a property sort descriptor by just simply declares the property name in the first parameter. The second parameter is used to control the ordering: `true` for ascending or `false` for descending (default is `true` if the parameter is not provided).\r\n\r\n```java\r\n// Sort the persons by whether the person is adult or not, the gender, and the first name\r\nList<Person> result = SortDescriptors\r\n\t.startWith(new AdultChecker(), true)\r\n\t.thenWith(\"gender\", false)\r\n\t.thenWith(\"firstName\", true)\r\n\t.sortedList(persons);\r\n```\r\n\r\nThe `AdultChecker` is a very simple class that implements `Transformer` to return `true` for a person whose age is larger than `18`; otherwise return `false`.\r\n\r\n```java\r\npublic class AdultChecker implements Transformer<Person, Boolean> {\r\n\r\n\tpublic static final int DEFAULT_ADULT_AGE = 18;\r\n\r\n\tprivate int _adultAge;\r\n\r\n\t/**\r\n\t * Construct <code>AdultTransformer</code> instance.\r\n\t */\r\n\tpublic AdultChecker() {\r\n\t\tthis(DEFAULT_ADULT_AGE);\r\n\t}\r\n\r\n\t/**\r\n\t * Construct <code>AdultTransformer</code> instance with the minimum\r\n\t * age to become an adult.\r\n\t */\r\n\tpublic AdultChecker(int age) {\r\n\t\t_adultAge = age;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Boolean transform(Person input) {\r\n\t\treturn Boolean.valueOf(input.getAge() >= _adultAge);\r\n\t}\r\n}\r\n```\r\n\r\nOf course, with Java 8, the `AdultChecker` can be replaced with single-staement lamda expression like this.\r\n\r\n```java\r\nList<Person> result = SortDescriptors\r\n\t.startWith((Person p) -> { return p.getAge() >= 18; }, true)\r\n\t.thenWith(\"gender\", false)\r\n\t.thenWith(\"firstName\", true)\r\n\t.sortedList(persons);\r\n```\r\n\r\nHere is the complete example, that uses `SortDescriptors` to ogranize three sort descriptors and then sorts 7 objects in expected order.\r\n\r\n```java\r\n// Given a lot of persons\r\nList<Person> persons = new ArrayList<Person>();\r\n// getBirthday(age, month, day)\r\npersons.add(new Person(\"Joe\", \"Lai\", Gender.Male, getBirthday(13, 1, 3)));\r\npersons.add(new Person(\"Jessica\", \"Lee\", Gender.Female, getBirthday(13, 11, 23)));\r\npersons.add(new Person(\"Mike\", \"Cheng\", Gender.Male, getBirthday(18, 9, 3)));\r\npersons.add(new Person(\"Richard\", \"Wang\", Gender.Male, getBirthday(16, 7, 13)));\r\npersons.add(new Person(\"Cathy\", \"Feng\", Gender.Female, getBirthday(21, 5, 9)));\r\npersons.add(new Person(\"Bill\", \"Lin\", Gender.Male, getBirthday(26, 3, 22)));\r\npersons.add(new Person(\"Zoe\", \"Kuan\", Gender.Female, getBirthday(34, 4, 30)));\r\n\r\n// Sort the persons by whether the person is adult or not, the gender, and the first name\r\nList<Person> result = SortDescriptors\r\n\t.startWith(new AdultChecker(), true)\r\n\t.thenWith(\"gender\", false)\r\n\t.thenWith(\"firstName\")\r\n\t.sortedList(persons);\r\n\r\n// Assert the ordering\r\n// The following are not adult, female first and then male\r\nassertEquals(\"Jessica Lee\", result.get(0).getFullName());\r\nassertEquals(\"Joe Lai\", result.get(1).getFullName());\r\nassertEquals(\"Richard Wang\", result.get(2).getFullName());\r\n\r\n// The following are adult, female first and then male\r\nassertEquals(\"Cathy Feng\", result.get(3).getFullName());\r\nassertEquals(\"Zoe Kuan\", result.get(4).getFullName());\r\nassertEquals(\"Bill Lin\", result.get(5).getFullName());\r\nassertEquals(\"Mike Cheng\", result.get(6).getFullName());\r\n```\r\n\r\n## Maven Site\r\nMaven site on [GitHub Pages](http://dbi1463.github.io/SortDescriptor/maven/)\r\n\r\n## License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Pin-Ying Tu <dbi1463@gmail.com>\r\n\r\nThis file is part of SortDescriptor under the MIT license.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}